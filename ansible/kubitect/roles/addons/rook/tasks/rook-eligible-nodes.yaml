---
- name: Extract Rook nodes
  vars:
    # Deploy only on worker nodes. If worker nodes are not set, use only master nodes.
    nodes: "{{ infra.cluster.nodes.worker.instances | default( infra.cluster.nodes.master.instances ) }}"
    node_selector: "{{ config.addons.rook.nodeSelector | default({}) }}"
    data_disk_selector: "{{ config.addons.rook.dataDiskSelector | default([]) }}"
  block:
    - name: Set initial values for Rook variables
      set_fact:
        nodes_labels: []
        rook_nodes: []

    - name: Get node labels for each node
      set_fact:
        nodes_labels: >-
          {{
            nodes_labels | default([]) + 
            [{ 'name': item.name, 'labels': hostvars[item.name].node_labels }] 
          }}
      loop: "{{ nodes }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - hostvars[item.name] | default(none)
        - hostvars[item.name].node_labels | default(none)
        - hostvars[item.name].node_labels | length > 0

    - name: Extract Rook nodes based on node selector
      block:
        - name: Prevent use of all nodes for Rook deployment
          set_fact:
            use_all_nodes: false

        - name: Filter Rook nodes with node selector
          vars:
            n_keys: "{{ node.labels.keys() | list }}"
            s_keys: "{{ node_selector.keys() | list }}"
            diff_keys: "{{ s_keys | difference(n_keys) }}"
          include_tasks: rook-node-selector-filter.yaml
          loop: "{{ nodes_labels }}"
          loop_control:
            loop_var: node
            label: "{{ node.name }}"
          when:
            - diff_keys | length == 0
      when:
        - node_selector | length != 0

    - name: Use all worker nodes as Rook nodes
      set_fact:
        use_all_nodes: true
        rook_nodes: "{{ nodes | map(attribute='name') }}"
      when:
        - node_selector | length == 0

    - name: Set initial value for Rook OSD nodes
      set_fact:
        use_all_devices: true
        rook_osd_nodes: []

      # rook_osd_nodes => List of {name: <NodeName>, devices: [<DevName>]}
      #
      # [ Example ]
      # rook_osd_nodes:
      #   - name: local-worker-1
      #     devices:
      #       - vdb
      #   - name: local-worker-2
      #     devices:
      #       - vdb
      #       - vdc
      #
    - name: Extract OSD nodes based on the Rook device filter
      set_fact:
        use_all_devices: false
        rook_osd_nodes: >-
          {{ 
            rook_osd_nodes | default([]) + 
            [{ 'name': item.name, 'devices': item.dataDisks | selectattr('name', 'in', data_disk_selector) | map(attribute='dev') }] 
          }}
      loop: "{{ nodes }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - data_disk_selector | length != 0
        - item.name in rook_nodes
        - item.dataDisks | default(none)
        - item.dataDisks | length > 0
        - item.dataDisks | map(attribute='name') | intersect(data_disk_selector) | length > 0

    - name: Extract OSD nodes based on attached disks
      set_fact:
        rook_osd_nodes: "{{ rook_osd_nodes | default([]) + [ item.name ] }}"
      loop: "{{ nodes }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - data_disk_selector | length == 0
        - item.name in rook_nodes
        - item.dataDisks | default(none)
        - item.dataDisks | length > 0
