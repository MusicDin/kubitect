---

# Verify hosts are present

- name: Fail if hosts are not defined
  fail:
    msg: |
      The value of 'hosts' is undefined.
      At least one host must be specified in the configuration.
      {{ config_example_hosts }}
  when:
    - not config.hosts | default(none)

# Verify host names

- name: Fail if any host is missing a name
  fail:
    msg: |
      One of the hosts has undefined 'name'.
      All hosts must have a unique name.
  loop: "{{ config.hosts }}"
  when:
    - item.name is not defined

- name: Fail if cluster name is invalid
  fail:
    msg: |
      One of the hosts has invalid 'name' ({{ item.name }}).
      The host name can contain only characters [a-Z], numbers [0-9], underscores [_] and hyphens [-].
  loop: "{{ config.hosts }}"
  when:
    - item.name is not regex( regex.names_normal )

- name: Fail if hosts names are not unique
  vars:
    hosts_count: "{{ config.hosts | length }}"
  fail:
    msg: |
      The names of the hosts are not unique!
      {{ config_example_hosts }}
  when: 
    - config.hosts | map(attribute='name') | unique | length | string != hosts_count

# Verify connection type

- name: Fail if host is missing a connection type
  fail:
    msg: |
      The host ({{ item.name }}) has 'connection.type' undefined!
  loop: "{{ config.hosts }}"
  when:
    - item.connection.type is not defined

- name: Fail if host's connection type has an invalid value
  fail:
    msg: |
      The host ({{ item.name }}) has an invalid 'connection.type' value ({{ item.connection.type }}).
      ({{ item.connection.type }})!
      Valid values are: [ local, remote ]
  loop: "{{ config.hosts }}"
  when: 
    - item.connection.type != 'local'
    - item.connection.type != 'localhost'
    - item.connection.type != 'remote'

- name: Fail if multiple hosts have connection type 'local' or 'localhost'
  fail:
    msg: |
      Only one host can have 'connection.type' set to 'localhost' or 'local'.
  when:
    - config.hosts | selectattr('connection.type', 'in', ('localhost', 'local')) | length > 1 

- name: Fail if remote host is missing a user attribute
  fail:
    msg: |
      The remote host ({{ item.name }}) has 'connection.user' undefined!
      The user of the remote host is required to establish an SSH connection with it.
  loop: "{{ config.hosts }}"
  when:
    - item.connection.type == 'remote'
    - item.connection.user is not defined

- name: Fail if remote host IP address is not defined
  fail:
    msg: |
      The remote host ({{ item.name }}) has 'connection.ip' undefined!
      The IP address of the remote host is required to establish an SSH connection with it.
  loop: "{{ config.hosts }}"
  when:
    - item.connection.type == 'remote' 
    - not item.connection.ip | default(none)

- name: Fail if remote host IP address is invalid
  fail:
    msg: |
      The remote host ({{ item.name }}) has an invalid 'connection.ip' value ({{ item.connection.ip }})!
  loop: "{{ config.hosts }}"
  when:
    - item.connection.type == 'remote'
    - item.connection.ip is defined
    - not item.connection.ip | ansible.utils.ipaddr

- name: Fail if remote host's SSH port is invalid
  fail:
    msg: |
      The remote host ({{ item.name }}) has an invalid 'connection.ssh.port' value ({{ item.connection.ssh.port }})!
      The SSH port can be any number between 1 and 65353.
      By default, SSH port 22 is used.
  loop: "{{ config.hosts }}"
  when:
    - item.connection.type == 'remote'
    - item.connection.ssh.port is defined
    - (not item.connection.ssh.port) or (item.connection.ssh.port | int < 1) or (item.connection.ssh.port | int > 65353)

# Verify default

- name: Fail if there are multiple default hosts
  fail:
    msg: |
      Multiple hosts are marked as default!
      Only one host can be marked as the default host.
  when:
    - config.hosts | selectattr('default', 'defined') | selectattr('default', 'eq', true) | length > 1

# Verify resource pools

- name: Fail if main resource pool is an empty string
  fail:
    msg: |
      The host ({{ item.name }}) has an invalid 'mainResourcePoolPath' value!
      The main resource pool path cannot be an empty string.
  loop: "{{ config.hosts }}"
  when: 
    - item.mainResourcePoolPath is defined
    - item.mainResourcePoolPath is none or item.mainResourcePoolPath | length == 0

- name: Verify data resource pools
  block:
    - name: Fail if data resource pool without a name exists
      fail:
        msg: |
          The host ({{ item.name }}) has a data resource pool with no name!
          Make sure that each data resource pool has a name.
      loop: "{{ config.hosts }}"
      when: 
        - item.dataResourcePools | length != item.dataResourcePools | selectattr('name', 'defined') | rejectattr('name', 'none') | length

    - name: Fail if data resource pool names are not unique
      fail:
        msg: |
          The host ({{ item.name }}) contains data resource pools with duplicate names!
          Make sure that the data resource pool names on the same host are unique.
      loop: "{{ config.hosts }}"
      when: 
        - item.dataResourcePools | length != item.dataResourcePools | map(attribute='name') | unique | length
  when: 
    - item.dataResourcePools is defined
    - item.dataResourcePools is not none
  
