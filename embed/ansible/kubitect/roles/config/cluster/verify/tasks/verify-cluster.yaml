---
- name: Verify cluster name
  block:
    - name: Fail if cluster name is not defined
      fail:
        msg: |
          The value of 'cluster.name' is undefined!
          The cluster name is required.
      when:
        - config.cluster.name is not defined

    - name: Fail if cluster name is invalid
      fail:
        msg: |
          The value of 'cluster.name' is invalid ({{ config.cluster.name }}).
          The cluster name can contain only characters [a-z], numbers [0-9] and hyphens [-].
      when:
        - config.cluster.name is not regex( regex.names_strict )

# -- Network -- #

- name: Verify network configuration
  block:
    - name: Fail if network mode is not defined
      fail:
        msg: |
          The value of 'cluster.network.mode' is undefined!
          The network mode is required.
      when:
        - config.cluster.network.mode is not defined

    - name: Fail if network mode is invalid
      fail:
        msg: |
          The value of 'config.cluster.network.mode' is invalid ({{ config.cluster.network.mode }}).
          Valid network modes are:
            {{ valid_network_modes }}
      when:
        - config.cluster.network.mode not in valid_network_modes

    - name: Fail if network CIDR is not defined
      fail:
        msg: |
          The value of 'cluster.network.cidr' is undefined!
          The network CIDR is required.
      when:
        - not config.cluster.network.cidr | default(none)

    - name: Fail if network CIDR is invalid
      fail:
        msg: |
          The value of 'config.cluster.network.cidr' is invalid ({{ config.cluster.network.cidr }})!
      when:
        - not config.cluster.network.cidr | ansible.utils.ipaddr

    - name: Fail if network mode is set to bridge and network bridge is not defined
      fail:
        msg: |
          The value of 'cluster.network.bridge' is undefined.
          Network bridge must be defined if the network mode is set to 'bridge'!
      when:
        - config.cluster.network.mode == 'bridge'
        - not config.cluster.network.bridge | default(none)

    - name: Fail if network gateway is not in network range
      fail:
        msg: |
          The value of 'cluster.network.gateway' is invalid ({{ config.cluster.network.gateway }})!
          The network gateway must be a usable IP address within a specified network range ({{ config.cluster.network.cidr }}).
          Usable IP addresses:
            {{ config.cluster.network.cidr | ansible.utils.ipaddr( 'range_usable' ) }}
      when:
        - config.cluster.network.gateway is defined
        - not config.cluster.network.cidr | ansible.utils.network_in_usable( config.cluster.network.gateway )

# -- Node template -- #

- name: Verify user
  fail:
    msg: |
      The value of 'cluster.nodeTemplate.user' is invalid!
      User cannot be an empty string.
  when:
    - config.cluster.nodeTemplate.user is defined
    - (config.cluster.nodeTemplate.user is none) or (config.cluster.nodeTemplate.user | length == 0)

- name: Verify node template OS properties.
  block:
    - name: Fail if OS distro is invalid
      fail:
        msg: |
          The value of 'cluster.nodeTemplate.os.distro' is invalid ({{ config.cluster.nodeTemplate.os.distro }})!
          Valid values are:
            {{ valid_os_distros }}
      when:
        - config.cluster.nodeTemplate.os.distro is defined
        - config.cluster.nodeTemplate.os.distro not in valid_os_distros

    - name: Fail if OS network interface is invalid
      fail:
        msg: |
          The value of 'cluster.nodeTemplate.os.networkInterface' is invalid!
          The network interface cannot be an empty string.
      when:
        - config.cluster.nodeTemplate.os.networkInterface is defined
        - (config.cluster.nodeTemplate.os.networkInterface is none) or (config.cluster.nodeTemplate.os.networkInterface | length == 0)

    - name: Fail if OS source is invalid
      fail:
        msg: |
          The value of 'cluster.nodeTemplate.os.source' is invalid.
          The OS source cannot be an empty string. It must be either a local path or a URL pointing to an OS image.
      when:
        - config.cluster.nodeTemplate.os.source is defined
        - (config.cluster.nodeTemplate.os.source is none) or (config.cluster.nodeTemplate.os.source | length == 0)

    - name: Verify all OS properties are set if OS distro is set to custom
      block:
        - name: Fail if OS source is undefined
          fail:
            msg: |
              The value of 'cluster.nodeTemplate.os.source' is undefined.
              The OS source must be defined if OS distro is set to 'custom'.
          when:
            - config.cluster.nodeTemplate.os.source is not defined

        - name: Fail if OS network interface is undefined
          fail:
            msg: |
              The value of 'cluster.nodeTemplate.os.networkInterface' is undefined.
              The OS networkInterface must be defined if OS distro is set to 'custom'.
          when:
            - config.cluster.nodeTemplate.os.networkInterface is not defined
      when:
        - config.cluster.nodeTemplate.os.distro is defined
        - config.cluster.nodeTemplate.os.distro == 'custom'

- name: Verify node template SSH keys exist
  block:
    - name: Check if SSH keys exist
      stat:
        path: "{{ item }}"
      register: ssh_keys
      loop:
        - "{{ config.cluster.nodeTemplate.ssh.privateKeyPath }}"
        - "{{ config.cluster.nodeTemplate.ssh.privateKeyPath }}.pub"

    - name: Fail if SSH keys do not exist
      fail:
        msg: |
          The value of 'cluster.nodeTemplate.ssh.privateKeyPath' is invalid.
          SSH key '{{ item.item }}' does not exist!
          Ensure that provided private key exists and that public key with '.pub'
          suffix is in the same directory.
      when:
        - item.stat.exists is false
      loop: "{{ ssh_keys.results }}"
      loop_control:
        label: "{{ item.item }}"
  when:
    - config.cluster.nodeTemplate.ssh.privateKeyPath is defined
    - config.cluster.nodeTemplate.ssh.privateKeyPath is not none

- name: Verify node template DNS records
  block:
    - name: Fail if node template DNS records are not valid IP addresses
      fail:
        msg: |
          The value of 'cluster.nodeTemplate.dns' contains an invalid DNS record ({{ item }}).
          Every DNS record must be a valid IP address.
      loop: "{{ config.cluster.nodeTemplate.dns if config.cluster.nodeTemplate.dns else [] }}"
      when:
        - item is defined
        - not item | ansible.utils.ipaddr
  when:
    - config.cluster.nodeTemplate.dns is defined
    - config.cluster.nodeTemplate.dns is not none

- name: Fail if node template CPU mode is invalid
  fail:
    msg: |
      The value of 'cluster.nodeTemplate.cpuMode' is invalid ({{ config.cluster.nodeTemplate.cpuMode }}).
      Valid CPU modes are:
        {{ valid_cpu_modes }}
  when:
    - config.cluster.nodeTemplate.cpuMode | default(none)
    - not config.cluster.nodeTemplate.cpuMode in valid_cpu_modes

# -- Nodes -- #

- name: Verify master nodes common properties
  include_tasks: verify-node-group.yaml
  vars:
    type: master
    nodes: "{{ config.cluster.nodes.master | default([]) }}"

- name: Verify worker nodes common properties
  include_tasks: verify-node-group.yaml
  vars:
    type: worker
    nodes: "{{ config.cluster.nodes.worker | default([]) }}"

- name: Verify load balancer nodes common properties
  include_tasks: verify-node-group.yaml
  vars:
    type: loadBalancer
    nodes: "{{ config.cluster.nodes.loadBalancer | default([]) }}"

- name: Verify number of master nodes is odd
  block:
    - name: Fail if at least one master node instance is not defined
      fail:
        msg: |
          Master node instances are not defined!
          At least one master node instance must be defined.
      when:
        - not config.cluster.nodes.master.instances | default(none)

    - name: Fail if number of master instances is even
      fail:
        msg: |
          Number of master node instances ({{ config.cluster.nodes.master.instances | length }}) is even!
          Number of master node instances must be odd (1, 3, 5, ...).
      when:
        - config.cluster.nodes.master.instances | length % 2 == 0

- name: Verify load balancer VIP
  block:
    - name: Fail if more then 1 LB is configured and VIP is not defined
      fail:
        msg: |
          The value 'cluster.nodes.loadBalancer.vip' in undefined!
          When more then 1 load balancer is configured, a virtual/floating IP
          for the load balancers needs to be configured.
      when:
        - config.cluster.nodes.loadBalancer.vip is not defined
        - config.cluster.nodes.loadBalancer.instances | length > 1

    - name: Fail if VIP is outside network range
      fail:
        msg: |
          The value of 'cluster.nodes.loadBalancer.vip' is invalid ({{ config.cluster.nodes.loadBalancer.vip }})!
          Load balancer virtual/floating IP must be an usable IP address within a specified network range ({{ config.cluster.network.cidr }}).
          Usable IP addresses:
            {{ config.cluster.network.cidr | ansible.utils.ipaddr( 'range_usable' ) }}
      when:
        - config.cluster.nodes.loadBalancer.vip is defined
        - not config.cluster.network.cidr | ansible.utils.network_in_usable( config.cluster.nodes.loadBalancer.vip )
  when:
    - config.cluster.nodes.loadBalancer.instances | default(none)

- name: Fail if virtual router ID is invalid
  vars:
    vrid: "{{ config.cluster.nodes.loadBalancer.virtualRouterId | default(none) }}"
  fail:
    msg: |
      The value of 'cluster.nodes.loadBalancer.virtualRouterId' is invalid ({{ vrid }})!
      Virtual router ID must be an arbitrary number between 0 and 255.
      Default virtual router ID is 51.
  when:
    - vrid is defined
    - vrid
    - (vrid is not regex( regex.non_negative_number )) or (vrid | int < 0) or (vrid | int > 255)

- name: Verify load balancer port forwarding
  vars:
    forwardPorts: "{{ config.cluster.nodes.loadBalancer.forwardPorts if config.cluster.nodes.loadBalancer.forwardPorts | default(none) else [] }}"
  block:
    - name: Fail if port name is invalid
      fail:
        msg: |
          The value 'cluster.nodes.loadBalancer.forwardPorts' has a port with an invalid name ({{ item.name | default(none) }})!
          Each port must have a 'name' property defined.
          Port name must be a non-empty string that can contain characters [a-z], numbers [0-9] and hyphens [-].
      loop: "{{ forwardPorts }}"
      when:
        - not item.name | default(none) or item.name is not regex( regex.names_strict )

    - name: Fail if port names are unique
      fail:
        msg: |
          The value 'cluster.nodes.loadBalancer.forwardPorts' has multiple ports with the same name ({{ item }})!
          Port names must be unique.
      loop: "{{ forwardPorts | map(attribute='name') | unique }}"
      when:
        - forwardPorts | selectattr('name', 'equalto', item) | length > 1

    - name: Fail if incoming port is invalid
      fail:
        msg: |
          The value 'cluster.nodes.loadBalancer.forwardPorts' has a port with an invalid incoming port value ({{ item.port | default(none) }})!
          Each port must have a 'port' property defined.
          Incoming port can be any number between 1 and 65353, excluding reserved ports: {{ reserved_ports }}.
      loop: "{{ forwardPorts }}"
      when:
        - (not item.port | default(none)) or (item.port | int < 1) or (item.port | int > 65353) or (item.port in reserved_ports)

    - name: Fail if incoming ports are not unique
      fail:
        msg: |
          The value 'cluster.nodes.loadBalancer.forwardPorts' has multiple ports with the same incoming port value ({{ item }})!
          Incoming ports must be unique.
      loop: "{{ forwardPorts | map(attribute='port') |unique }}"
      when:
        - forwardPorts | selectattr('port', 'equalto', item) | length > 1

    - name: Fail if target port is invalid
      fail:
        msg: |
          The value 'cluster.nodes.loadBalancer.forwardPorts' has a port with an invalid 'targetPort' value ({{ item.targetPort | default(none) }})!
          Target port can be any number between 1 and 65353.
          By default, the target port is set to the same value as the incoming port ('port').
      loop: "{{ forwardPorts }}"
      when:
        - item.targetPort is defined
        - (item.targetPort | int < 1) or (item.targetPort | int > 65353)

    - name: Fail if target is invalid
      fail:
        msg: |
          The value 'cluster.nodes.loadBalancer.forwardPorts' has a port with an invalid target value ({{ item.target | default(none) }})!
          Valid target values are: {{ valid_forward_port_targets }}.
          By default, the target is set to 'workers'.
      loop: "{{ forwardPorts }}"
      when:
        - item.target is defined
        - item.target not in valid_forward_port_targets
  when:
    - forwardPorts | default(none)

- name: Verify all defined IP and MAC addresses are unique
  vars:
    master_nodes: "{{ config.cluster.nodes.master.instances if config.cluster.nodes.master.instances | default(none) else [] }}"
    worker_nodes: "{{ config.cluster.nodes.worker.instances if config.cluster.nodes.worker.instances | default(none) else [] }}"
    lb_nodes: "{{ config.cluster.nodes.loadBalancer.instances if config.cluster.nodes.loadBalancer.instances | default(none) else [] }}"
    lb_vip: "{{ [config.cluster.nodes.loadBalancer.vip] if config.cluster.nodes.loadBalancer.vip | default(none) else [] }}"
    master_ips: "{{ master_nodes | selectattr('ip', 'defined') | map(attribute='ip') | list }}"
    worker_ips: "{{ worker_nodes | selectattr('ip', 'defined') | map(attribute='ip') | list }}"
    lb_ips: "{{ lb_nodes | selectattr('ip', 'defined') | map(attribute='ip') | list }}"
    master_macs: "{{ master_nodes | selectattr('mac', 'defined') | map(attribute='mac') | list }}"
    worker_macs: "{{ worker_nodes | selectattr('mac', 'defined') | map(attribute='mac') | list }}"
    lb_macs: "{{ lb_nodes | selectattr('mac', 'defined') | map(attribute='mac') | list }}"
    ips: "{{ master_ips + worker_ips + lb_ips + lb_vip }}"
    macs: "{{ master_macs + worker_macs + lb_macs }}"
  block:
    - name: Fail if duplicate IP addresses are found
      fail:
        msg: |
          Multiple node instaces have the same IP address defined ({{ item }}).
          IP addresses of all node instances must be unique (including a load balancer VIP).
      loop: "{{ ips | unique }}"
      when:
        - ips | select('equalto', item) | list | length > 1

    - name: Fail if duplicate MAC addresses are found
      fail:
        msg: |
          Multiple node instaces have the same MAC address defined ({{ item }}).
          MAC addresses of all node instances must be unique.
      loop: "{{ macs | unique }}"
      when:
        - macs | select('equalto', item) | list | length > 1
